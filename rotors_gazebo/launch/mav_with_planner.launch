<launch>
  <arg name="mav_name" default="firefly"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/powerplant.world" />
    <!-- <arg name="debug" value="true"/> -->
    <arg name="paused" value="true"/>
    <!-- <arg name="gui" value="false"/> -->
  </include>

  <group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/$(arg mav_name)_vi_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
    </include>
    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    <node name="global_planner_node" pkg="rotors_control" type="global_planner_node" output="screen">
    </node>

    <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen"/>
    <node name="waypoint_planner" pkg="rotors_gazebo" type="waypoint_planner" output="screen" args="$(find rotors_gazebo)/resource/example_waypoints2.txt"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>

  <!-- OctoMap Server -->
  <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
    <param name="resolution" value="1" />
    <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
    <param name="frame_id" type="string" value="world" />
    <!-- maximum range to integrate (speedup!) -->
    <param name="sensor_model/max_range" value="9.0" />

    <param name="latch" value="false" />

    <param name="sensor_model/min" value="0.0" />
    <param name="sensor_model/max" value="1.0" />
    <param name="sensor_model/hit" value="0.6" />
    <param name="sensor_model/miss" value="0.4" />
    <!-- Filter out obstacles which are lower than 1 meter -->
    <param name="occupancy_min_z" value="1.0" />
    <!-- data source to integrate (PointCloud2) -->
    <remap from="cloud_in" to="/firefly/vi_sensor/camera_depth/depth/points" respawn="true" />
  </node>

  <!-- RViz -->
  <node pkg="rviz" type="rviz" output="screen" name="rviz" args="home/vilhjalmur/PlannerWithOctomap.rviz" respawn="true" />
</launch>
