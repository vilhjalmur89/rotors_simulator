<launch>
  <arg name="headless" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="enable_logging" default="false"/>
  <arg name="enable_ground_truth" default="true"/>
  <arg name="enable_mavlink_interface" default="true"/>
  <arg name="ns" default="iris"/>
  <arg name="log_file" default="$(arg ns)"/>
  <arg name="mavlink_bridge_url" default="udp://localhost:14553@localhost:14560" />
  <arg name="mav_name" default="$(arg ns)"/>

    <include file="$(find rotors_gazebo)/launch/iris_depth_camera.launch">
        <arg name="headless" value="$(arg headless)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="enable_logging" value="$(arg enable_logging)" />
        <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
        <arg name="enable_mavlink_interface" value="$(arg enable_mavlink_interface)" />
        <arg name="log_file" value="$(arg log_file)"/>
    </include>
    <!-- <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node> -->
    <node name="global_planner_node" pkg="rotors_control" type="global_planner_node" args="$(find rotors_gazebo)/resource/random_goals" output="screen" />
    <node name="path_handler_node" pkg="rotors_control" type="path_handler_node" output="screen" />
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

  <!-- Hack to fix the tf-tree, /world is connected to /iris/ground_truth/iris/ground_truth/odometry_sensorgt_link instead of /iris/ground_truth/odometry_sensorgt_link-->
  <node pkg="tf" type="static_transform_publisher" name="depth_camera_tf" args="0 0 0 -1.58 0 -1.58 /iris/ground_truth/iris/ground_truth/odometry_sensorgt_link /base_link 100"/>

  <include file="$(find mavros)/launch/mavlink_bridge.launch">
    <arg name="mavlink_bridge_url" value="$(arg mavlink_bridge_url)" />
    <arg name="ns" value="$(arg ns)"/>
  </include>

  <!-- OctoMap Server -->
  <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
    <param name="resolution" value="1" />
    <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
    <param name="frame_id" type="string" value="world" />
    <!-- maximum range to integrate (speedup!) -->
    <param name="sensor_model/max_range" value="9.0" />

    <param name="latch" value="false" />

    <param name="sensor_model/min" value="0.0" />
    <param name="sensor_model/max" value="1.0" />
    <param name="sensor_model/hit" value="0.7" />
    <param name="sensor_model/miss" value="0.4" />
    <param name="color/r" value="0.1" />
    <param name="color/g" value="0.1" />
    <param name="color/b" value="0.1" />
    <param name="color/a" value="1.0" />
    <!-- Filter out obstacles which are lower than 1 meter -->
    <param name="occupancy_min_z" value="1.0" />
    <param name="height_map" value="false" />

    <param name="publish_free_space" value="true" />
    <!-- data source to integrate (PointCloud2) -->
    <remap from="cloud_in" to="/camera/depth/points" respawn="true" />
  </node>

  <!-- RViz -->
  <node pkg="rviz" type="rviz" output="screen" name="rviz" args="home/vilhjalmur/PlannerWithOctomap.rviz" respawn="true" />

</launch>


